import asyncio
import re
from typing import Optional

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message

from keyboards.inline.create_inline_keyboard import (
    main_menu_inline_keyboard,
    move_favourites_keyboard,
    create_limit_search_keyboard
)
from kinopoisk_API.movie_API import search_movie_api


class MovieSearchStates(StatesGroup):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞.
    """
    waiting_for_movie_name = State()
    waiting_for_movie_limit = State()


async def handle_movie_search(callback_query: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞.

    :param callback_query: –û–±—ä–µ–∫—Ç CallbackQuery –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–≤—à–µ–≥–æ –∫–æ–º–∞–Ω–¥—É.
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è Finite State Machine –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    """
    await state.clear()
    await callback_query.answer()
    await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:')
    await state.set_state(MovieSearchStates.waiting_for_movie_name)


async def process_movie_name(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ–∏–ª—å–º–∞.
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è Finite State Machine –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    """
    movie_name = message.text
    # –£–¥–∞–ª—è–µ—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ `movie_name` –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –±—É–∫–≤ (–ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –∏ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö), —Ü–∏—Ñ—Ä, –¥–µ—Ñ–∏—Å–∞ –∏ –ø—Ä–æ–±–µ–ª–æ–≤.
    # –≠—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞ –æ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ –∏–ª–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤).
    clean_movie_name = re.sub(r'[^A-Za-z–ê-–Ø–∞-—è0-9\- ]+', '', movie_name)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(movie_name=clean_movie_name)

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤ –∏—Å–∫–∞—Ç—å
    limit_message = await message.answer('–°–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤ –∏—Å–∫–∞—Ç—å?', reply_markup=create_limit_search_keyboard())
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    await state.update_data(limit_message_id=limit_message.message_id)
    await state.set_state(MovieSearchStates.waiting_for_movie_limit)


async def process_movie_limit(callback_query: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫.

    :param callback_query: –û–±—ä–µ–∫—Ç CallbackQuery –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º.
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è Finite State Machine –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    """
    await callback_query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –∏–∑ callback_data
    limit = int(callback_query.data.split('_')[1])

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    movie_name = data.get('movie_name')

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –ª–∏–º–∏—Ç–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    limit_message_id = data.get('limit_message_id')
    if limit_message_id:
        await callback_query.message.bot.delete_message(chat_id=callback_query.message.chat.id,
                                                        message_id=limit_message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    searching_message = await callback_query.message.answer('–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!')

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
    movie_data = await search_movie_api(movie_name, limit=limit)  # –ü–µ—Ä–µ–¥–∞–µ–º –ª–∏–º–∏—Ç –≤ API

    await searching_message.delete()

    if movie_data and movie_data['docs']:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–∞—Ö
        movies = []

        for movie_info in movie_data['docs']:
            poster_url = movie_info['poster']['url'] if movie_info['poster'] else None
            description = movie_info['description']
            genres = ', '.join(genre['name'] for genre in movie_info['genres'])
            country = ', '.join(country['name'] for country in movie_info['countries'])

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ –≤ —Å–ø–∏—Å–æ–∫
            movies.append({'name': movie_info['name'], 'year': movie_info['year'], 'genres': genres,
                           'country': country, 'id': movie_info['id']})

            caption = (
                f'üé¨ <i><b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b></i> {movie_info['name']}\n'
                f'üìÖ <i><b>–ì–æ–¥:</b></i> {movie_info['year']}\n'
                f'üìù <i><b>–û–ø–∏—Å–∞–Ω–∏–µ:</b></i> {description}\n'
                f'üé≠ <i><b>–ñ–∞–Ω—Ä—ã:</b></i> {genres}\n'
                f'üåç <i><b>–°—Ç—Ä–∞–Ω–∞:</b></i> {country}\n'
                f'<i><b>–†–µ–π—Ç–∏–Ω–≥:</b></i>\n'
                f'‚≠ê<i><b>–ö–ø:</b></i> {movie_info['rating']['kp']} '
                f'‚≠ê<i><b>imdb:</b></i> {movie_info['rating']['imdb']} '
                f'‚≠ê<i><b>FC:</b></i> {movie_info['rating']['filmCritics']} '
                f'‚≠ê<i><b>RFC:</b></i> {movie_info['rating']['russianFilmCritics']}'
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É caption –∏ –æ–±—Ä–µ–∑–∞–µ–º description –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            _max_caption_length = 1024
            if len(caption) > _max_caption_length:
                excess_length = len(caption) - _max_caption_length
                description = description[:-excess_length].rstrip() + '...'  # –û–±—Ä–µ–∑–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
                caption = caption.replace(movie_info['description'], description)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–µ—Ä –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            if poster_url:
                await callback_query.message.answer_photo(photo=poster_url, caption=caption, parse_mode='HTML',
                                                          reply_markup=move_favourites_keyboard(movie_info))
            else:
                await callback_query.message.answer(caption, parse_mode='HTML',
                                                    reply_markup=move_favourites_keyboard(movie_info))

            await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –≤ FSMContext
        await state.update_data(movies=movies)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é
        await callback_query.message.answer('–í—Å–µ —Ñ–∏–ª—å–º—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                            reply_markup=main_menu_inline_keyboard())

    else:
        await callback_query.message.answer(f'–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ\n"<i><b>{movie_name}</b></i>".',
                                            reply_markup=main_menu_inline_keyboard())
        await state.clear()
