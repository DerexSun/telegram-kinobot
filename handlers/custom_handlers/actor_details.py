from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from keyboards.inline.create_inline_keyboard import show_movies_actor_keyboard
from kinopoisk_API.actor_id_API import get_actor_info


async def get_actor_details(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–µ—Ä–µ –ø–æ –µ–≥–æ ID.
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç actor_id –∏–∑ callback_data, –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–µ—Ä–µ
    –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –µ–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.

    :param callback_query: –û–±—ä–µ–∫—Ç CallbackQuery –æ—Ç Aiogram.
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSMContext –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    """
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ actor_id –∏–∑ callback_data
    actor_callback_id = callback_query.data.split(':')[1]
    actor_info = await get_actor_info(int(actor_callback_id))

    if actor_info:
        await process_actor_info(actor_info, callback_query, state)

    await callback_query.message.edit_reply_markup()  # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback_query.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ


async def process_actor_info(actor_info, callback_query: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–µ—Ä–µ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –µ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.

    :param actor_info: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–∫—Ç–µ—Ä–µ.
    :param callback_query: –û–±—ä–µ–∫—Ç CallbackQuery –æ—Ç Aiogram.
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSMContext –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    """
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–µ—Ä–∞
    actor_birthday = actor_info.get('birthday')
    formatted_birthday = actor_birthday.split('T')[0] if actor_birthday else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    birth_places = ', '.join([place['value'] for place in actor_info.get('birthPlace', [])]) or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã —Å–º–µ—Ä—Ç–∏
    actor_death = actor_info.get('death')
    formatted_death = actor_death.split('T')[0] if actor_death else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å—É–ø—Ä—É–≥–µ
    spouses = actor_info.get('spouses', [])
    spouses_info = []
    for spouse in spouses:
        relation = spouse.get('relation', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        divorce_status = '–≤ —Ä–∞–∑–≤–æ–¥–µ' if spouse.get('divorced', False) else '–≤ –±—Ä–∞–∫–µ'
        children_count = spouse.get('children', '–Ω–µ—Ç')
        spouses_info.append(f'{relation} ({divorce_status}, –¥–µ—Ç–∏: {children_count})')

    spouses_caption = ', '.join(spouses_info) if spouses_info else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –æ–± –∞–∫—Ç–µ—Ä–µ
    facts = [fact['value'] for fact in actor_info.get('facts', [])]
    facts_caption = '\n'.join(
        [f'üìù <i><b>–§–∞–∫—Ç {i + 1}:</b></i> {fact}' for i, fact in enumerate(facts)]) if facts else '–ù–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤'

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
    age = actor_info.get('age', None)
    if age is not None:
        if age % 10 == 1 and age % 100 != 11:
            age_suffix = '–≥–æ–¥'
        elif age % 10 in [2, 3, 4] and not (age % 100 in [12, 13, 14]):
            age_suffix = '–≥–æ–¥–∞'
        else:
            age_suffix = '–ª–µ—Ç'
    else:
        age_suffix = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–≥—Ä–∞–¥
    awards_count = actor_info.get('countAwards')
    awards_count_caption = awards_count if awards_count is not None else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–µ—Ä–∞
    actor_caption = (
        f'üé≠ <i><b>–ò–º—è:</b></i> {actor_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n'
        f'üåç <i><b>–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è:</b></i> {actor_info.get('enName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n'
        f'‚ö§ <i><b>–ü–æ–ª:</b></i> {'‚ôÇÔ∏è –ú—É–∂—á–∏–Ω–∞' if actor_info.get('sex') == '–ú—É–∂—Å–∫–æ–π' else '‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω–∞' if actor_info.get('sex') == '–ñ–µ–Ω—Å–∫–∏–π' else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n'
        f'üìè <i><b>–†–æ—Å—Ç:</b></i> {actor_info.get('growth', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} —Å–º\n'
        f'üéÇ <i><b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b></i> {formatted_birthday}\n'
        f'ü™¶ <i><b>–î–∞—Ç–∞ —Å–º–µ—Ä—Ç–∏:</b></i> {formatted_death}\n'
        f'üéâ <i><b>–í–æ–∑—Ä–∞—Å—Ç:</b></i> {age} {age_suffix}\n'
        f'üó∫Ô∏è <i><b>–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:</b></i> {birth_places}\n'
        f'üèÜ <i><b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≥—Ä–∞–¥:</b></i> {awards_count_caption}\n'
        f'üíç <i><b>–°—É–ø—Ä—É–≥–∏:</b></i> {spouses_caption}\n'
        f'{facts_caption}\n'
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–µ—Ä–æ–º –∞–∫—Ç–µ—Ä–∞
    poster_url = actor_info.get('photo', None)
    if poster_url:
        await callback_query.message.answer_photo(photo=poster_url)
        await callback_query.message.answer(actor_caption, parse_mode='HTML', reply_markup=show_movies_actor_keyboard())
    else:
        await callback_query.message.answer(actor_caption, parse_mode='HTML', reply_markup=show_movies_actor_keyboard())

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç—ë—Ä–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–∏–ª—å–º–æ–≤
    await state.update_data(actor_info=actor_info)
